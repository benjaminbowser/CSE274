// Benjamin Bowser// CSE274 UAimport java.util.EmptyStackException;/** * A class of stacks whose entries are stored in an array. *  * @author Frank M. Carrano and Timothy M. Henry * @version 4.0 */public class ArrayStack<T> implements StackInterface<T> {	private T[] stack; // Array of stack entries	private int topIndex; // Index of top entry	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;	public ArrayStack() {		this(DEFAULT_CAPACITY);	} // end default constructor	public ArrayStack(int initialCapacity) {		checkCapacity(initialCapacity);		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempStack = (T[]) new Object[initialCapacity];		stack = tempStack;		topIndex = -1;		initialized = true;	} // end constructor	// The following are non-working stubs	private void checkCapacity(int d) {	}	public void clear() {		for (int i = 0; i < stack.length; i++) { // If this gives an error, then length-1			stack[i] = null;			topIndex = -1;		}	}	public boolean isEmpty() {		return topIndex == -1;	}	public T peek() {		if (isEmpty()) {			throw new EmptyStackException();		}		return stack[topIndex];	}	public void push(T newEntry) {		topIndex++;		stack[topIndex] = newEntry;	}	public T pop() { 		if (isEmpty()) {			throw new EmptyStackException();		}		T result = stack[topIndex];		stack[topIndex] = null;		topIndex--;		return result;	}} // end ArrayStack