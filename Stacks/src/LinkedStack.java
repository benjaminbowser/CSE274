import java.util.EmptyStackException;//Benjamin Bowser//CSE274 UA/** * A class of stacks whose entries are stored in a chain of nodes. *  * @author Frank M. Carrano and Timothy M. Henry * @version 4.0 *//* * ANSWERS TO PAPER SECTION: * #1: S contains: bba << bottom *     t contains: d *  * #2: pile contains: Jill, Jill, Jill, Jess, Jane << bottom *  * #3: 543543210 <<bottom  *  * #4: result = 24 *  */public class LinkedStack<T> implements StackInterface<T> {	private Node topNode; // References the first node in the chain	public LinkedStack() {		topNode = null;	} // end default constructor	// < Implementations of the stack operations go here. >	// . . .	private class Node {		private T data; // Entry in stack		private Node next; // Link to next node		private Node(T dataPortion) {			this(dataPortion, null);		} // end constructor		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		} // end constructor		private T getData() {			return data;		} // end getData		private void setData(T newData) {			data = newData;		} // end setData		private Node getNextNode() {			return next;		} // end getNextNode		private void setNextNode(Node nextNode) {			next = nextNode;		} // end setNextNode	} // end Node	// The following are non-working stubs	private void checkCapacity(int d) {	}	public void clear() {		topNode = null;	}	public boolean isEmpty() {		return topNode == null;	}	public T peek() {		if (isEmpty()) {			throw new EmptyStackException();		}		return topNode.data;	}	public void push(T newEntry) {		Node newNode = new Node(newEntry, topNode);		topNode = newNode;	}	public T pop() {		if (isEmpty()) {			throw new EmptyStackException();		}		Node oldNode = topNode;		topNode = topNode.next;		return oldNode.data;	}} // end LinkedStack